{"version":3,"sources":["Components/Question.js","Components/Result.js","Components/util.js","Components/Quiz.js","Components/App.js","reportWebVitals.js","index.js"],"names":["StyledQuestion","styled","div","Question","question","submitAnswer","useState","userAnswer","setUserAnswer","correctAnswer","correct","copyAnswers","incorrect","handleChange","event","pickedAnswer","target","value","onSubmit","preventDefault","alert","map","response","className","type","name","onChange","Result","right","wrong","gotRight","gotWrong","calculatedScore","Math","round","StyledQuiz","StyledText","span","Quiz","allQuestions","setAllQuestions","questionIdx","setQuestionIdx","setRight","setWrong","useEffect","a","fetch","json","questions","randomize","fetchData","error","console","log","counter","shuffleArr","indices","index","floor","random","length","includes","push","answer","showQuestion","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.268bc337.chunk.js","sourcesContent":["//displays questions;\nimport React, { useState } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst StyledQuestion = styled.div`\n  background-color: white;\n  width: 50vw;\n  margin-left: 25%;\n`\n\nconst Question = ({question, submitAnswer}) => {\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const correctAnswer = question.correct;\n\n  let copyAnswers = [question.correct, ...question.incorrect]\n  const shuffleAnswers = (copyAnswers) => {\n    let counter = 0;\n    let shuffleArr = [];\n    while (counter < copyAnswers.length){\n      shuffleArr.push(copyAnswers[Math.floor(Math.random() * Math.floor(copyAnswers.length-1))])\n      counter++;\n    }\n    copyAnswers = shuffleArr;\n\n  }\n\n\n\n  const handleChange = (event) => {\n    const pickedAnswer = event.target.value;\n    setUserAnswer(pickedAnswer);\n  }\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if(!userAnswer){\n      return (\n        alert(\"Sorry, you need to pick an answer!\")\n      )\n    }\n\n    if (userAnswer === correctAnswer){\n      submitAnswer(true)\n    } else {\n      submitAnswer(false)\n      alert(`The correct answer is ${correctAnswer}`)\n    }\n\n    setUserAnswer(\"\")\n  }\n\n  return (\n    <StyledQuestion>\n    {question && question.question}\n  <form onSubmit={handleSubmit}>\n    {question && copyAnswers.map(response => {\n      return(\n        <div key={response} className={response}>\n          <input type=\"radio\" value={response} name=\"response-options\" onChange={handleChange} />\n        {response}\n        </div>\n     )})}\n    <button type=\"submit\">Next</button>\n  </form>\n    </StyledQuestion>\n  )\n}\n\nexport default Question\n\n\nQuestion.propTypes = {\n  handleChange: PropTypes.func.isRequired,\n  handleSubmit: PropTypes.func.isRequired\n}\n","//displays results.\n\nimport React from 'react';\nimport PropTypes from 'prop-types'\nimport {calculateScore} from './util'\n\nconst Result = ({gotRight, gotWrong}) => {\n  const calculatedScore = calculateScore(gotRight, gotWrong)\n\n  return (\n    <div className=\"results\">\n      Correct: {gotRight}\n      Incorrect: {gotWrong}\n      Final Score: {calculatedScore} %\n    </div>\n  )\n}\n\nexport default Result\n\nResult.propTypes = {\n  correct: PropTypes.number.isRequired,\n  incorrect: PropTypes.number.isRequired,\n  calculatedScore: PropTypes.number\n}\n","//functions for randomizing the order of indices\n//for getting a question and then popping it out of the array\n//for calculating the score at the end\n\nexport function randomize(array){\n  let copyArray = [...array]\n  for (let i = copyArray.length - 1; i < copyArray.length; i--) {\n    let j =   Math.floor(Math.random() * (i + 1));\n    [copyArray[i], copyArray[j]] = [copyArray[j], copyArray[i]]\n  }\n  return copyArray\n\n}\n\n//calculating the score:\nexport function calculateScore(right, wrong){\n  return Math.round((right / (right + wrong)) * 100)\n}\n\n","import React, { useState, useEffect, useCallback } from 'react';\nimport styled from 'styled-components';\n\nimport Question from './Question';\nimport Result from './Result';\n\nconst StyledQuiz = styled.div`\n  background: rgb(238,174,202);\n  background: linear-gradient(90deg, rgba(238,174,202,1) 0%, rgba(148,187,233,1) 100%);\n  font-family: \"Lucida Console\", Monaco, monospace;\n  height: 100vh;\n`\nconst StyledText = styled.span`\n  position: relative;\n  left: 1em;\n  top: 1em;\n`\n\nconst Quiz = () => {\n  const [allQuestions, setAllQuestions] = useState([]);\n  // const [question, setQuestion] = useState();\n  //recommended that we don't keep the question on state, but call it when it needs to be called with a get method...?\n  //guess we could write a filter to do conditional rendering.\n  const [questionIdx, setQuestionIdx] = useState(0);\n  const [gotRight, setRight] = useState(0);\n  const [gotWrong, setWrong] = useState(0);\n\n  const maxQuestions = 10;\n\n  useEffect(() => {\n    try {\n      async function fetchData() {\n        const response = await fetch('/api/data');\n        const questions = await response.json();\n        randomize(questions);\n      }\n    fetchData();\n   } catch (error) {\n      console.log(\"there was an error fetching the data!\", error)\n    }\n  }, []); // [] effect doesn't need props or state\n\n\nconst randomize = (questions) => {\n    let counter = 0;\n    let shuffleArr = [];\n    let indices = [];\n    while (counter <= maxQuestions) {\n      let index = Math.floor(Math.random() * Math.floor(questions.length-1))\n      if(!indices.includes(index)){\n        shuffleArr.push(questions[index])\n        counter++\n      }\n  }\n  setAllQuestions(shuffleArr)\n  console.log(\"all the questions\", allQuestions)\n}\n\n  const submitAnswer = async (answer) => {\n    console.log(\"answer stuff\", answer)\n    setQuestionIdx(questionIdx+1);\n    if (answer){\n      setRight(gotRight+1)\n      console.log(\"gotRight\", gotRight)\n    } else {\n      setWrong(gotWrong+1)\n      console.log(\"gotwrong\", gotWrong)\n    }\n}\n\n\n  const showQuestion = (question) => {\n    if (questionIdx < maxQuestions && allQuestions.length > 0) {\n      return (<Question question={question} submitAnswer={submitAnswer} />)\n    }\n  }\n\n\n  return (\n    <>\n    <StyledQuiz>\n     <StyledText>\n       <h2>Trivia Quiz!</h2>\n     { (questionIdx === maxQuestions ? <Result gotRight={gotRight} gotWrong={gotWrong} /> : showQuestion(allQuestions[questionIdx]))}\n     </StyledText>\n    </StyledQuiz>\n    </>\n  )\n}\n\nexport default Quiz;\n","\nimport './App.css';\n\nimport Quiz from './Quiz'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      {/* <header className=\"App-header\">\n          Learn React\n      </header> */}\n      <Quiz />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}